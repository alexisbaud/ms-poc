import axios from 'axios';

// Configuration de base pour axios
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3000/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// Intercepteur pour ajouter le token d'authentification √† chaque requ√™te
api.interceptors.request.use(config => {
  // V√©rification des cl√©s dans localStorage
  const token = localStorage.getItem('token');
  
  // Journalisation d√©taill√©e des requ√™tes
  console.log(`üîç API Request: ${config.method.toUpperCase()} ${config.url}`);
  console.log(`üîç API BaseURL: ${config.baseURL}`);
  console.log(`üîç API Full URL: ${config.baseURL}${config.url}`);
  
  // Protection suppl√©mentaire pour les requ√™tes qui n√©cessitent une authentification
  if (['post', 'put', 'delete'].includes(config.method) && 
      !config.url.includes('/auth/login') && 
      !config.url.includes('/auth/register')) {
  }
  
  // Configuration de l'en-t√™te avec le token
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
    console.log('üîç API Token pr√©sent dans les headers');
  } else {
    console.log('üîç API Aucun token trouv√© dans localStorage');
  }
  
  return config;
}, error => {
  console.error('üîç API Erreur de requ√™te:', error);
  return Promise.reject(error);
});

// Intercepteur pour g√©rer les erreurs de r√©ponse
api.interceptors.response.use(
  response => {
    console.log(`üîç API R√©ponse: ${response.status} ${response.statusText} pour ${response.config.url}`);
    return response;
  },
  error => {
    // Journal d√©taill√© pour toutes les erreurs
    console.error('üîç API Erreur d√©tect√©e:', error.message);
    
    // D√©tails de l'erreur par type
    if (error.response) {
      // Le serveur a r√©pondu avec un code d'erreur
      console.error(`üîç API Erreur serveur: ${error.response.status} ${error.response.statusText}`);
      console.error('üîç API Donn√©es d\'erreur:', error.response.data);
      console.error('üîç API Headers de r√©ponse:', error.response.headers);
      
      // Stockage des erreurs dans localStorage pour d√©bogage
      localStorage.setItem('lastApiError', JSON.stringify({
        timestamp: new Date().toISOString(),
        url: error.config?.url,
        method: error.config?.method,
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
        baseURL: error.config?.baseURL
      }));
      
      // V√©rifier le token √† nouveau en cas d'erreur 401
      if (error.response?.status === 401) {
        const token = localStorage.getItem('token');
        
        // Stockage d'information de debug pour r√©soudre le probl√®me ult√©rieurement
        localStorage.setItem('lastAuthError', JSON.stringify({
          timestamp: new Date().toISOString(),
          tokenPresent: !!token,
          url: error.config?.url,
          errorDetails: error.response?.data
        }));
        
        // Essayer de d√©coder le JWT pour v√©rifier s'il est valide/expir√©
        if (token) {
          try {
            // V√©rifier si le token a une structure valide (3 parties s√©par√©es par des points)
            const parts = token.split('.');
            if (parts.length === 3) {
              const payload = JSON.parse(atob(parts[1]));
              console.error('üîç API Contenu du JWT:', payload);
              
              // V√©rifier l'expiration
              if (payload.exp) {
                const expDate = new Date(payload.exp * 1000);
                const now = new Date();
                console.error(`üîç API JWT expir√©: ${expDate < now}, Expiration: ${expDate.toISOString()}`);
              }
            } else {
              console.error('üîç API Token JWT mal format√©');
            }
          } catch (e) {
            console.error('üîç API Erreur lors du d√©codage du JWT:', e.message);
          }
        }
        
        // Redirection vers login si erreur 401 (non authentifi√©) et si ce n'est pas un endpoint public
        // Stocker la derni√®re URL pour rediriger apr√®s la connexion
        const currentPath = window.location.pathname;
        if (currentPath !== '/login' && currentPath !== '/auth') {
          localStorage.setItem('redirectAfterLogin', currentPath);
        }
        
        // Ne pas rediriger automatiquement - laisser les composants g√©rer l'erreur 401
      }
    } else if (error.request) {
      // La requ√™te a √©t√© envoy√©e mais aucune r√©ponse n'a √©t√© re√ßue
      console.error('üîç API Aucune r√©ponse re√ßue:', error.request);
      
      // V√©rifier si c'est potentiellement une erreur CORS
      if (error.message && (
        error.message.includes('Network Error') || 
        error.message.includes('CORS') ||
        error.message.includes('cross-origin')
      )) {
        console.error('üîç API Erreur CORS possible - V√©rifier la configuration du serveur');
        console.error(`üîç API URL appel√©e: ${error.config.baseURL}${error.config.url}`);
        console.error(`üîç API Origine: ${window.location.origin}`);
        
        localStorage.setItem('lastCorsError', JSON.stringify({
          timestamp: new Date().toISOString(),
          url: error.config?.url,
          fullUrl: `${error.config?.baseURL}${error.config?.url}`,
          origin: window.location.origin,
          message: error.message
        }));
      }
      
      // Stockage pour d√©bogage
      localStorage.setItem('lastNetworkError', JSON.stringify({
        timestamp: new Date().toISOString(),
        url: error.config?.url,
        method: error.config?.method,
        message: error.message,
        baseURL: error.config?.baseURL
      }));
    } else {
      // Erreurs lors de la configuration de la requ√™te
      console.error('üîç API Erreur de configuration:', error.message);
    }
    
    return Promise.reject(error);
  }
);

export default api; 